{
  "id": 0,
  "name": "typedoc",
  "kind": 1,
  "kindString": "project",
  "children": [
    {
      "id": 1,
      "name": "alias",
      "kind": 2,
      "kindString": "module",
      "children": [
        {
          "id": 7,
          "name": "HorribleRecursiveTypeThatShouldNotBeUsedByAnyone",
          "kind": 32768,
          "kindString": "alias",
          "comment": {
            "shortText": "See GH#1150. Calling typeChecker.typeToString on this type will send TS into an infinite\nloop, which is undesirable.",
            "text": "",
            "tags": []
          },
          "typeParameters": [
            {
              "kind": 131072,
              "kindString": "typeParameter",
              "name": "T",
              "constraint": {
                "kind": 1,
                "kindString": "array",
                "elementType": {
                  "kind": 32,
                  "kindString": "intrinsic",
                  "name": "any"
                }
              }
            },
            {
              "kind": 131072,
              "kindString": "typeParameter",
              "name": "R",
              "defaultValue": {
                "kind": 64,
                "kindString": "object",
                "properties": [],
                "signatures": [],
                "constructSignatures": []
              }
            }
          ],
          "type": {
            "kind": 4,
            "kindString": "indexedAccess",
            "indexType": {
              "kind": 2,
              "kindString": "conditional",
              "checkType": {
                "kind": 4,
                "kindString": "indexedAccess",
                "indexType": {
                  "kind": 16384,
                  "kindString": "literal",
                  "value": "length"
                },
                "objectType": {
                  "kind": 1024,
                  "kindString": "reference",
                  "name": "T",
                  "typeArguments": []
                }
              },
              "extendsType": {
                "kind": 16384,
                "kindString": "literal",
                "value": 0
              },
              "trueType": {
                "kind": 16384,
                "kindString": "literal",
                "value": 0
              },
              "falseType": {
                "kind": 16384,
                "kindString": "literal",
                "value": 1
              }
            },
            "objectType": {
              "kind": 64,
              "kindString": "object",
              "properties": [
                {
                  "kind": 128,
                  "kindString": "property",
                  "name": "0",
                  "isReadonly": false,
                  "isOptional": false,
                  "propertyType": {
                    "kind": 1024,
                    "kindString": "reference",
                    "name": "R",
                    "typeArguments": []
                  }
                },
                {
                  "kind": 128,
                  "kindString": "property",
                  "name": "1",
                  "isReadonly": false,
                  "isOptional": false,
                  "propertyType": {
                    "kind": 1024,
                    "kindString": "reference",
                    "name": "HorribleRecursiveTypeThatShouldNotBeUsedByAnyone",
                    "typeArguments": [
                      {
                        "kind": 1024,
                        "kindString": "reference",
                        "name": "PopFront",
                        "typeArguments": [
                          {
                            "kind": 1024,
                            "kindString": "reference",
                            "name": "T",
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": 524288,
                        "kindString": "unknown",
                        "name": "{\n      [K in keyof R | keyof T[0]]: K extends keyof R ? R[K] : T[0][K];\n    }"
                      }
                    ]
                  }
                }
              ],
              "signatures": [],
              "constructSignatures": []
            }
          }
        },
        {
          "id": 4,
          "name": "IsString",
          "kind": 32768,
          "kindString": "alias",
          "comment": {
            "shortText": "Conditional types from TS2.8",
            "text": "",
            "tags": []
          },
          "typeParameters": [
            {
              "kind": 131072,
              "kindString": "typeParameter",
              "name": "T"
            }
          ],
          "type": {
            "kind": 2,
            "kindString": "conditional",
            "checkType": {
              "kind": 1024,
              "kindString": "reference",
              "name": "T",
              "typeArguments": []
            },
            "extendsType": {
              "kind": 32,
              "kindString": "intrinsic",
              "name": "string"
            },
            "trueType": {
              "kind": 16384,
              "kindString": "literal",
              "value": "string"
            },
            "falseType": {
              "kind": 16384,
              "kindString": "literal",
              "value": "not string"
            }
          }
        },
        {
          "id": 6,
          "name": "PopFront",
          "kind": 32768,
          "kindString": "alias",
          "comment": {
            "shortText": "Conditional type with infer",
            "text": "",
            "tags": []
          },
          "typeParameters": [
            {
              "kind": 131072,
              "kindString": "typeParameter",
              "name": "T",
              "constraint": {
                "kind": 1,
                "kindString": "array",
                "elementType": {
                  "kind": 32,
                  "kindString": "intrinsic",
                  "name": "any"
                }
              }
            }
          ],
          "type": {
            "kind": 2,
            "kindString": "conditional",
            "checkType": {
              "kind": 2048,
              "kindString": "signature",
              "typeParameters": [],
              "parameters": [
                {
                  "kind": 8192,
                  "kindString": "signatureParameter",
                  "name": "args",
                  "isOptional": false,
                  "isRest": true,
                  "parameterType": {
                    "kind": 1024,
                    "kindString": "reference",
                    "name": "T",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": 32,
                "kindString": "intrinsic",
                "name": "any"
              }
            },
            "extendsType": {
              "kind": 2048,
              "kindString": "signature",
              "typeParameters": [],
              "parameters": [
                {
                  "kind": 8192,
                  "kindString": "signatureParameter",
                  "name": "a",
                  "isOptional": false,
                  "isRest": false,
                  "parameterType": {
                    "kind": 32,
                    "kindString": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "kind": 8192,
                  "kindString": "signatureParameter",
                  "name": "r",
                  "isOptional": false,
                  "isRest": true,
                  "parameterType": {
                    "kind": 8,
                    "kindString": "inferred",
                    "name": "R"
                  }
                }
              ],
              "returnType": {
                "kind": 32,
                "kindString": "intrinsic",
                "name": "any"
              }
            },
            "trueType": {
              "kind": 1024,
              "kindString": "reference",
              "name": "R",
              "typeArguments": []
            },
            "falseType": {
              "kind": 32,
              "kindString": "intrinsic",
              "name": "never"
            }
          }
        },
        {
          "id": 5,
          "name": "PromiseType",
          "kind": 32768,
          "kindString": "alias",
          "comment": {
            "shortText": "Extracts the type of a promise.",
            "text": "",
            "tags": []
          },
          "typeParameters": [
            {
              "kind": 131072,
              "kindString": "typeParameter",
              "name": "T"
            }
          ],
          "type": {
            "kind": 2,
            "kindString": "conditional",
            "checkType": {
              "kind": 1024,
              "kindString": "reference",
              "name": "T",
              "typeArguments": []
            },
            "extendsType": {
              "kind": 1024,
              "kindString": "reference",
              "name": "PromiseLike",
              "typeArguments": [
                {
                  "kind": 8,
                  "kindString": "inferred",
                  "name": "U"
                }
              ]
            },
            "trueType": {
              "kind": 1024,
              "kindString": "reference",
              "name": "U",
              "typeArguments": []
            },
            "falseType": {
              "kind": 1024,
              "kindString": "reference",
              "name": "T",
              "typeArguments": []
            }
          }
        },
        {
          "id": 2,
          "name": "TCompareFunction",
          "kind": 32768,
          "kindString": "alias",
          "comment": {
            "shortText": "A type that describes a compare function, e.g. for array.sort().",
            "text": "",
            "tags": []
          },
          "typeParameters": [
            {
              "kind": 131072,
              "kindString": "typeParameter",
              "name": "T"
            }
          ],
          "type": {
            "kind": 2048,
            "kindString": "signature",
            "typeParameters": [],
            "parameters": [
              {
                "kind": 8192,
                "kindString": "signatureParameter",
                "name": "a",
                "isOptional": false,
                "isRest": false,
                "parameterType": {
                  "kind": 1024,
                  "kindString": "reference",
                  "name": "T",
                  "typeArguments": []
                }
              },
              {
                "kind": 8192,
                "kindString": "signatureParameter",
                "name": "b",
                "isOptional": false,
                "isRest": false,
                "parameterType": {
                  "kind": 1024,
                  "kindString": "reference",
                  "name": "T",
                  "typeArguments": []
                }
              }
            ],
            "returnType": {
              "kind": 32,
              "kindString": "intrinsic",
              "name": "number"
            }
          }
        },
        {
          "id": 3,
          "name": "TId",
          "kind": 32768,
          "kindString": "alias",
          "comment": {
            "shortText": "A type for IDs.",
            "text": "",
            "tags": []
          },
          "typeParameters": [],
          "type": {
            "kind": 262144,
            "kindString": "union",
            "types": [
              {
                "kind": 32,
                "kindString": "intrinsic",
                "name": "number"
              },
              {
                "kind": 32,
                "kindString": "intrinsic",
                "name": "string"
              }
            ]
          }
        }
      ]
    }
  ]
}